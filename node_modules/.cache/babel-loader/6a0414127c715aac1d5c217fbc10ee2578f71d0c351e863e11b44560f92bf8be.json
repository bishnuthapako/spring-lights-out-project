{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/code/springboard-project/react-course/react-project/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 0.25\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  // console.log(board, 'board')\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return Array.from({\n      length: nrows\n    }).map(row => Array.from({\n      length: ncols\n    })).map(col => Math.random() < chanceLightStartsOn);\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  return /*#__PURE__*/_jsxDEV(Cell, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","Array","from","length","map","row","col","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/code/springboard-project/react-course/react-project/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25}) {\n  const [board, setBoard] = useState(createBoard());\n// console.log(board, 'board')\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n   return Array.from({length: nrows}).map(row=>Array.from({length: ncols})).map(col=>Math.random() < chanceLightStartsOn)\n   \n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row=> row.every(cell=> !cell))\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  return (\n    <Cell />\n  )\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,SAAAC,MAAA,IAAAC,OAAA;AAyBA,SAASC,KAAKA,CAAAC,IAAA,EAAsD;EAAAC,EAAA;EAAA,IAArD;IAAEC,KAAK,GAAG,CAAC;IAAEC,KAAK,GAAG,CAAC;IAAEC,mBAAmB,GAAG;EAAI,CAAC,GAAAJ,IAAA;EAChE,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,WAAW,CAAC,CAAC,CAAC;EACnD;EACE;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB;IACD,OAAOC,KAAK,CAACC,IAAI,CAAC;MAACC,MAAM,EAAET;IAAK,CAAC,CAAC,CAACU,GAAG,CAACC,GAAG,IAAEJ,KAAK,CAACC,IAAI,CAAC;MAACC,MAAM,EAAER;IAAK,CAAC,CAAC,CAAC,CAACS,GAAG,CAACE,GAAG,IAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,mBAAmB,CAAC;IAErH,OAAOI,YAAY;EACrB;EAEA,SAASS,MAAMA,CAAA,EAAG;IAChB;IACA,OAAOZ,KAAK,CAACa,KAAK,CAACL,GAAG,IAAGA,GAAG,CAACK,KAAK,CAACC,IAAI,IAAG,CAACA,IAAI,CAAC,CAAC;EACnD;EAEA,SAASC,eAAeA,CAACC,KAAK,EAAE;IAC9Bf,QAAQ,CAACgB,QAAQ,IAAI;MACnB,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACb,GAAG,CAACc,MAAM,CAAC;MAE3C,MAAMC,QAAQ,GAAGA,CAACJ,CAAC,EAAEC,CAAC,EAAEI,SAAS,KAAK;QACpC;;QAEA,IAAIJ,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,IAAIoB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,EAAE;UAC9C0B,SAAS,CAACL,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACI,SAAS,CAACL,CAAC,CAAC,CAACC,CAAC,CAAC;QACpC;MACF,CAAC;;MAED;;MAEA;;MAEA;IACF,CAAC,CAAC;EACJ;;EAEA;;EAEA;;EAEA;;EAEA;EACA,oBACE1B,OAAA,CAACF,IAAI;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEZ;AAAC/B,EAAA,CA/CQF,KAAK;AAAAkC,EAAA,GAALlC,KAAK;AAiDd,eAAeA,KAAK;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}