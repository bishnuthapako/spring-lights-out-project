{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/code/springboard-project/react-course/react-project/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 0.25\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  console.log(board, 'board');\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return Array.from({\n      length: nrows\n    }).map(row => Array.from({\n      length: ncols\n    })).map(col => Math.random() < chanceLightStartsOn);\n\n    // return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You WIN!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n\n  // TODO\n\n  // make table board\n  let tblBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: boardCopy,\n        flipCellsAroundMe: e => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this));\n    }\n    tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n  // TODO\n  // return (\n  //   <Cell />\n  // )\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","console","log","Array","from","length","map","row","col","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","push","isLit","flipCellsAroundMe","e","className","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/code/springboard-project/react-course/react-project/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25}) {\n  const [board, setBoard] = useState(createBoard());\nconsole.log(board, 'board')\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n   return Array.from({length: nrows}).map(row=>Array.from({length: ncols})).map(col=>Math.random() < chanceLightStartsOn)\n   \n    // return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row=> row.every(cell=> !cell))\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row=>[...row])\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy)\n      flipCell(y, x - 1, boardCopy)\n      flipCell(y, x + 1, boardCopy)\n      flipCell(y - 1, x, boardCopy)\n      flipCell(y + 1, x, boardCopy)\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if(hasWon){\n    return <div>You WIN!</div>\n  }\n\n  // TODO\n\n  // make table board\n  let tblBoard = []\n  for(let y = 0; y < nrows; y++){\n    let row = [];\n    for(let x = 0; x < ncols; x++){\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell \n        key = {coord}\n        isLit = {boardCopy}\n        flipCellsAroundMe={(e)=>flipCellsAround(coord)}\n        />\n      )\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>)\n  }\nreturn (\n  <table className=\"Board\">\n    <tbody>{tblBoard}</tbody>\n  </table>\n);\n  // TODO\n  // return (\n  //   <Cell />\n  // )\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}